const CronJob = require('cron').CronJob;
const fetch = require("node-fetch");
const FormData = require('form-data');
const fs = require('fs');

var job = new CronJob('*/30 * * * * *', function() {

    var fs = require('fs');
    var Promise = require('bluebird');
    var readFile = Promise.promisify(fs.readFile);
    var writeFile = Promise.promisify(fs.writeFile);
    const testFolder = '../../../../Reports';

    fs.readdir(testFolder, (err, files) => {
        files.forEach(file => {
            console.log(file);
        });
        console.log(files);
        var lastItem = files.pop();
        console.log(lastItem);

        var promiseArray = [
                        //readFile('Conduit Inventory.txt'), 
                        //readFile('Conduit statistics.txt'),
                        readFile(`${testFolder}/${lastItem}/summary/Flow routing continuity.txt`),
                        readFile(`${testFolder}/${lastItem}/summary/Inflows.txt`),
                        //readFile('Model complexity.txt'),
                        //readFile('Model inventory.txt'),
                        //readFile('Node statistics.txt'),
                        //readFile('Options.txt'),
                        //readFile('Pipe inventory.txt'),
                        readFile(`${testFolder}/${lastItem}/summary/Results statistics.txt`),
                        readFile(`${testFolder}/${lastItem}/summary/Runoff quantity continuity.txt`),
                        //readFile('Subcatchment statistics.txt'),
                        //readFile('Unused objects.txt')
                    ];

    let data_dict = {
        "Dry weather inflow (ML)": "dryweaflow",
        "Wet weather inflow (ML)": "wetweaflow",
        "Groundwater inflow (ML)": "groundweaflow",
        "RDII inflow (ML)": "rdiiflow",
        "External inflow (ML)": "exnalflow",
        "External outflow (ML)": "exnaloutflow",
        "Flooding loss (ML)": "floodloss",
        "Evaporation loss (ML)": "evaloss",
        "Exfiltration loss (ML)": "exfiltionloss",
        "Initial stored volume (ML)": "lnitialvols",
        "Final stored volume (ML)": "finalvols",
        "Continuity error (%)": "conerrors",
        "RDII inflows": "rdiiflows",
        "Time series inflows": "timeflows",
        "Dry weather inflows": "dryweaflows",
        "Groundwater inflows": "groundflows",
        "Max. subcatchment total runoff (ML)": "maxmg",
        "Max. subcatchment peak runoff (m?/s)": "maxcfs",
        "Max. subcatchment runoff coefficient": "maxcoeffnt",
        "Max. subcatchment total precip (mm)": "maxin",
        "Min. subcatchment total precip (mm)": "minin",
        "Max. node depth (m)": "mxnode",
        "Num. nodes surcharged": "surcharged",
        "Max. node surcharge duration (hours)": "nodesurched",
        "Max. node height above crown (m)": "maxcrown",
        "Min. node depth below rim (m)": "minbelow",
        "Num. nodes flooded": "flooded",
        "Max. node flooding duration (hours)": "flooding",
        "Max. node flood volume (ML)": "floodmg",
        "Max. node ponded volume or depth (ha-mm/1000 m?/m)": "pondedvolume",
        "Max. storage volume (1000 m?)": "maxvolume",
        "Max. storage percent full (%)": "maxperfull",
        "Max. outfall flow frequency (%)": "maxfrecy",
        "Max. outfall peak flow (m?/s)": "results_maxflow",
        "Max. outfall total volume (ML)": "maxoutfallmg",
        "Total outfall volume (ML)": "totalmg",
        "Max. link peak flow (m?/s)": "maxpeak",
        "Max. link peak velocity (m/s)": "maxlinkty",
        "Min. link peak velocity (m/s)": "minpeakty",
        "Num. conduits surcharged": "conduits",
        "Max. conduit surcharge duration (hours)": "maxconduits",
        "Max. conduit capacity limited duration (hours)": "maxcapacity",
        "Initial LID storage (mm)": "lidstroage",
        "Initial snow cover (mm)": "snowcover",
        "Total precipitation (mm)": "totalin",
        "Outfall runon (mm)": "runonin",
        "Evaporation loss (mm)": "evalossin",
        "Infiltration loss (mm)": "infitionloss",
        "Surface runoff (mm)": "surfacein",
        "LID drainage (mm)": "drainage",
        "Snow removed (mm)": "snowved",
        "Final snow cover (mm)": "finalsnow",
        "Final storage (mm)": "finalin",
        "Continuity error (%)": "conerror",
    };

    Promise.all(promiseArray).then((dataArray)=>{
        var data = '';
        const obj ={};
        for(var i=0;i<dataArray.length;i++){
            data += dataArray[i];
            //dataArray ไม่ใช่ row แต่เป็นไฟล์
            let allfile = ""+dataArray[i];
            //eval(dataArray[i]);
            //console.log(eval(dataArray[i]));
            
            //let column = allfile.split("\t");
            let breakfile = allfile.split("\r\n");
            for(item of breakfile){
                let line = item.split("\t");
                if(line.length>=2){
                    let key = ""+line[0];
                    let value = ""+line[1];
                    let new_key = data_dict[key];
                    obj[new_key] = value;
                }
                //console.log(line);
            }
            //let file = breakfile.toString().split(",");
            //console.log(breakfile);
        }
        console.log(obj);

        //------scraping-------
        /*var osmosis = require('osmosis');

        osmosis
            .get('sample/test1.html')
            .find('table.desc')
            .set('data')
            .data(function(res) {
                console.log(res)
             })
            .log(console.log)
            .error(console.log)
            .debug(console.log)
        */

            fs.readFile(`${testFolder}/${lastItem}/2D_Base.html`, (err, data) => {
                if (err) throw err;
                data = ''+data;
                data = data.split("<td>");
                data = data[6];
                data = data.split("<");
                data = data[0];
                //console.log('data',data); 3/23/2020 11:02:51 AM
                data = DateTime.ParseExact(`${data}`, "M/d/yyyy h:mm:ss tt", CultureInfo.InvariantCulture);
    
                //-------------------------fetch file-----------------------
                var form = new FormData();
                //form.append('my_field', 'my value');
                //form.append('my_buffer', new Buffer(10));
                form.append('Outfalls', fs.createReadStream(`${testFolder}/${lastItem}/graph/Rainfall_Runoff.png`));
                form.append('kmls', fs.createReadStream(`${testFolder}/${lastItem}/kml/2D_Base.kmz`));
                form.append('profiles', fs.createReadStream(`${testFolder}/${lastItem}/profile/ซอยรามคำแหง 1-5.png`));
                form.append('profiles2', fs.createReadStream(`${testFolder}/${lastItem}/profile/แยกพัฒนาการ LH.png`));
                form.append('profiles3', fs.createReadStream(`${testFolder}/${lastItem}/profile/แยกพัฒนาการ RH.png`));
                form.append('profiles4', fs.createReadStream(`${testFolder}/${lastItem}/profile/แยกลำสาลี RL.png`));
                form.append('profiles5', fs.createReadStream(`${testFolder}/${lastItem}/profile/หน้ามหาวิยาลัยรามคำแหง (ฝั่งมหาวิทยาลัย).png`));
                form.append('detail', JSON.stringify(obj));
                form.append('report_generate', data);
                console.log("Before fetch");
    
                /*
                form.submit('http://example.org/', function(err, res) {
                    // res – response object (http.IncomingMessage)  //
                    res.resume();
                });
                */
    
                const rawResponse = fetch('https://weather.ckartisan.com/api/weatherapi', {
                    method: 'POST',
                    /*headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },*/
                    body: form
                })
                .then((response) => response.json())
                .then((result) => {
                    console.log('Success:', result);
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
                //const answer = rawResponse.json();
    
                //console.log(obj);
                //console.log(typeof(data));
    
            });
            
        });
        

    });
    
    /*Promise.all(promiseArray).then((dataArray)=>{
        var data = '';
        for(var i=0;i<dataArray.length;i++){
            data += dataArray[i];
            //dataArray ไม่ใช่ row แต่เป็นไฟล์
            let allfile = ""+dataArray[i];
            //eval(dataArray[i]);
            //console.log(eval(dataArray[i]));
            let column = allfile.split("\t");
            let breakfile = column.toString().split("\r\n");
            let file = breakfile.toString().split(",");
            console.log(file);
        }
    //console.log(typeof(data));
    });*/

}, null, true, 'America/Los_Angeles');
job.start();